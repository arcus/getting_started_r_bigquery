{
  "hash": "c753746a36125b9b108165ea0ad4da34",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Getting Started: R and BigQuery\"\nformat: \n  revealjs:\n    theme: [serif, custom.scss]\n    scrollable: true\n    footer: Joy Payton, Children's Hospital of Philadelphia\n    css: styles.css\neditor: visual\n---\n\n\n------------------------------------------------------------------------\n\nThis slide deck was built in Quarto!\n\n-   Use keyboard arrow keys to\n    -   advance ( → ) and\n    -   go back ( ← )\n-   Type \"s\" to see speaker notes\n-   Type \"?\" to see other keyboard shortcuts\n\n\n::: {.cell}\n\n:::\n\n\n\n\n# Itinerary for Second Hour\n\n-   Exploring Data\n-   SQL Refresher (or SQL 101)\n-   Querying in BigQuery\n\n\n\n::: notes\n\n\n:::\n\n\n# Viewing \"Starred\" Data {.smaller}\n\n::: {.columns .v-center-container}\n::: {.column width=\"50%\"}\nSince there are so many public datasets, Google no longer displays those by default in BigQuery, even though you have access to them. That's why we \"starred\" them.\n\nNow we can select to show \"only starred data\".\n:::\n\n::: {.column width=\"50%\"}\n![](media/bigquery_starred_data.png){.bordered}\n:::\n:::\n\n::: notes\nYou might have several tabs open at this point, and I personally like to at least pretend that I keep my browser tabs to a minimum, although honestly, I often have 30 tabs open at a time. I'd like you to close all your GCP tabs except for one, and go back into your project and into BigQuery. That will be good practice for you in navigating in a project. So I'll switch now to sharing my screen. I'm going to close these extra tabs, then make sure my project is appropriately selected in the project selector. I can use the menu to go to BigQuery. Now, I'll choose to show only starred data, and it'll be much easier to see just the data I want for my project.\n:::\n\n# Structures of Data {.smaller}\n\n::: {.columns .v-center-container}\n::: {.column width=\"50%\"}\n-   Projects contain datasets\n-   Datasets contain tables (point-in-time, established data) and views (live filters that show current data)\n:::\n\n::: {.column width=\"50%\"}\n![](media/bigquery_expanded_data.png){.bordered}\n:::\n:::\n\n::: notes\nIn BigQuery, you can expand a project to show its included datasets, and expand datasets to show their included tables and views. Please expand into your projects and datasets using the triangle keys until you see something similar to the image on your screen. In this case, we have three tables in the ADI data, and seven tables in the CDC data. In the next few minutes, you'll look around at this data.\n:::\n\n# Exploring Data {.smaller}\n\nYou can click on a table's name to open it to the right. Take a look at the first three tabs available, which will be available for every table.\n\n-   Schema (what the columns are)\n-   Details (how big it is, other metadata)\n-   Preview (very important because FREE)\n\n![](media/table_info.png){.bordered} \n\n::: notes \n\nI'd like to invite you to look at one of these tables by clicking on the table name. Not every bit of metadata that shows up as an available tab will actually be populated with information, that really depends on the source of the data and what is included with it. For now, I want you to look at the first few tabs: Schema, which shows the columns in the table, Details, which has some other metadata, and Preview, which allows you to look over the data as if you were to issue a 'SELECT \\*' SQL query on that table.\n\nSo I'll screen share at this point and walk you through this. I'm going to click on the first table in the broadstreet_adi dataset, and I can adjust the panes here using the sliding adjuster to make sure I can see the full table names. So I want to look at this first table, index by census block group. I click on it, and information opens up on the right. I'll look at Schema to get an idea of what my data contains. It looks like it has a lot of place identifiers, like fips codes, which in the United States are codes that can describe lots of things, but in this case are unique IDs for different geographies, like county, or state or census block group. There's also the area deprivation index percent, which might be some kind of measure that as I think might have something to do with the socioeconomic characteristics of that geographic area.\n\nLooking at the schema can give me a good overview of the data, IF my columns are well named. In this case, they are. Not every data set has a full schema. For example, this dataset doesn't have anything in way of description for the fields, which is annoying.\n\nNow we can briefly look at details. I don't care that much about this, but sometimes this pane might have interesting information about the sheer amount of data or some tagging that might be useful. Not for this data, however!\n\nLet's then go on to preview. A great thing about previews in BigQuery is that they are FREE. In BigQuery, you pay not for the storage of the data but for the processing power of the queries you run. But previews are free and allow you to look at the data overall. This can be very useful in understanding more intuitively what's in the dataset. Are county names capitalized? Are numbers in decimal format, or integers? Are there units or abbreviations in the data? Preview is where you can get that information.\n\nIn Preview, you can page through the columns, see the overall number of rows, go to the last page, and so on. OK, I'm going to return to my slides now.\n\n:::\n\n# Data Exploration Exercise {.smaller}\n\n::: {.columns .v-center-container}\n::: {.column width=\"80%\"}\nLook through the tables in the Broadstreet ADI data and the CDC Births data to understand what the data is capturing, and identify the following:\n\n-   One or more fields that has linking information in common, in that the data appears in both datasets (might not have the same field name) -- we'll call this our \"join\" data\n-   One or more columns / fields in the ADI data that help characterize socioeconomic disadvantage and are in the same table as our join data\n-   One or more columns / fields in the CDC data that help describe something about birth statistics and are in the same table as our join data\n:::\n:::\n\n\n::: {.cell}\n::: {.cell-output-display}\n\n```{=html}\n<div class=\"countdown\" id=\"timer_b6179a31\" data-update-every=\"1\" tabindex=\"0\" style=\"right:0;bottom:0;\">\n<div class=\"countdown-controls\"><button class=\"countdown-bump-down\">&minus;</button><button class=\"countdown-bump-up\">&plus;</button></div>\n<code class=\"countdown-time\"><span class=\"countdown-digits minutes\">05</span><span class=\"countdown-digits colon\">:</span><span class=\"countdown-digits seconds\">00</span></code>\n</div>\n```\n\n:::\n:::\n\n\n::: notes\nPlease look through the tables in the Broadstreet ADI data and the CDC Births data, using the Schema and Preview tabs that we just explored to try to identify the following, and jot them down somewhere. Make note of the table name and the column name (we can also say \"field\" instead of column).\n\n-   One or more columns / fields that has information in common, in that the data appears in both the ADI dataset and the CDC dataeset. Note that these data might not have the same field name in the two datasets. We'll call this our \"join\" data.\n-   One or more columns / fields in the ADI data that help characterize socioeconomic disadvantage and are in the same table as the join data in the ADI version of the join data\n-   One or more columns / fields in the CDC data that help describe something about birth statistics and are in the same table as our join data in the CDC version of the join data.\n\nI'll start a timer for 5 minutes, and I want you to explore that data, get caught up on the slides, and take a break. \n:::\n\n\n# SQL Refresher {.smaller}\n\nThis is the pattern we'll come back to again and again in SQL (Structured Query Language):\n\n`SELECT + FROM + WHERE;`\n\n| cabin | high_score | wins | losses |\n|--|--|---|---|\n| Yellow | 10 |3 |0|\n|Blue |7 |2 |1 |\n|Orange |9 |1| 2|\n\nFor example: `SELECT cabin, high_score FROM camp_kickball_tournament WHERE high_score < 10`\n\n\n::: notes \n\nSQL, or Structured Query Language, is used to get information from a database that stores data in tables. Tables have rows, which are individual records, and columns, which are the values that are included in a record. \n\nWe use a common pattern in SQL: SELECT plus some column names, FROM plus a table name, and WHERE plus some row conditions.\n\nConsider, for example, this pretend table called camp_kickball_tournament.  If we wanted to extract just some data from this table, we could use the SELECT statement to indicate which columns, and the WHERE statement to indicate a filter to help determine which rows matched.  The FROM gives us the table name to look in.\n:::\n\n# Aliases (AS) \n\nAliases allow you to (re)name things:\n\n```\nSELECT \n  cabin, \n  high_score, \n  wins/(wins + losses) AS prop_win   \nFROM camp_kickball_tournament \nWHERE high_score < 10;\n```\n\n::: notes\n\nYou can use aliases to make things easier to read, by creating shortened names for things, renaming things that don't already have intuitive names, or calculating computed data and naming that data.\n\n:::\n\n# Whitespace / Capitalization {.smaller}\n\nWhich is easier to read?\n\n\n::: {.columns .v-center-container}\n::: {.column width=\"40%\"}\n```\nSELECT \n  cabin, \n  high_score, \n  wins/(wins + losses) AS prop_win \nFROM camp_kickball_tournament \nWHERE high_score < 10;\n```\n:::\n::: {.column width=\"60%\"}\n\n```\nselect cabin,high_score,wins/(wins + losses) as prop_win from camp_kickball_tournament where high_score < 10;\n```\n:::\n:::\n\n* Be consistent (reduce cognitive load on teammates / future you) \n* Capitalize key words so they stand out \n* Indent the parts of your query \n* Consider using a new line for every field\n\n::: notes \nBoth of these are valid SQL syntax and do the same thing, but one will make future-you happier.\n\nLots of digital ink has been spilled on the \"right\" way to structure SQL queries but it boils down to:\n\n* Be consistent (reduce cognitive load on teammates / future you) \n* Capitalize key words so they stand out \n* Indent the parts of your query \n* Consider using a new line for every field\n\n:::\n\n# Query Button {.smaller}\n\nUse the \"Query\" button (or the one with the magnifying glass) when you're looking within a table to avoid annoying syntax issues like having to type fully qualified table names (`project.dataset.table`).\n\n![](media/query_button.png){.bordered .one-third}\n\n::: notes\nBigQuery requires fully qualified table names, where you include the project name, the dataset name, and the table name, all separated by periods and enclosed in backticks (not the same as single quotes).  This can be challenging to learn and hard to type correctly.\n\nSkip the headache by starting with the \"Query\" button with the magnifying glass.  If you're zoomed in or there's not much screen real estate, this button might appear with only the magnifying glass.  This button is available when you're looking at the details of a particular table, and it will give you the start of a query with the table name included!\n\n:::\n\n# Queries in BigQuery  {.smaller}\n\nOnce you click \"Query Table\" (and then \"New Tab\" or whatever you prefer), you'll see a partial query, with the cursor located so that you can add fields after SELECT.\n\n![](media/boilerplate_query.png){.bordered}\n\nYou'll also see warnings that your query is invalid.  That's expected!\n\n::: notes\nWhen you start a new query this way, you'll be given the start of a query with the table name included, and your cursor in the SELECT statement, where you could just type in a field name or two or three, separated by commas.\n\nYou'll also see red warnings that your query is invalid.  That's expected, because your query is in fact incomplete... you haven't indicated which fields you want in your SELECT statement.  You can hover over the error to get an explanation.\n:::\n\n# Your First Query {.smaller}\n\n::: {.columns .v-center-container}\n::: {.column width=\"60%\"}\n* You might have to adjust your pane widths to see all the buttons you need.\n* Please click on the table in the CDC data (`sdoh_cdc_wonder_natality`) called `county_natality`. * Click on the \"query\" button and choose \"In split tab\".\n* Add one or more fields from the schema of the table between the words \"SELECT\" and \"FROM\" in the query.\n* When you get a green check mark showing that your query is valid, click the blue \"Run\" button above your query.\n:::\n::: {.column width=\"40%\"}\n![](media/first_query){.bordered}\n:::\n:::\n\n\n::: {.cell}\n::: {.cell-output-display}\n\n```{=html}\n<div class=\"countdown\" id=\"timer_06f1d22d\" data-update-every=\"1\" tabindex=\"0\" style=\"right:0;bottom:0;\">\n<div class=\"countdown-controls\"><button class=\"countdown-bump-down\">&minus;</button><button class=\"countdown-bump-up\">&plus;</button></div>\n<code class=\"countdown-time\"><span class=\"countdown-digits minutes\">03</span><span class=\"countdown-digits colon\">:</span><span class=\"countdown-digits seconds\">00</span></code>\n</div>\n```\n\n:::\n:::\n\n\n\n::: notes\nOK, so you're going to issue the first SQL query in the workshop today.  Note that you might have to adjust your pane widths to see all the buttons you need.\n\nI'd like for you to look in your starred datasets, and  click on the table in the CDC data called `county_natality`.\n\nThen, click on the query button, which will have a magnifying glass, and choose \"split tab.\"  That will allow you to see the Schema and the Query on the same screen.\n\nUsing what you know from the Schema, add one or more field names that are valid for this table in the SQL query, right after the word SELECT.\n\nWhen you get a green check mark showing that your query is valid, click the blue \"Run\" button above your query.\n\nI'll give everyone 3 minutes for this.\n\nGreat, so now let me demonstrate this in case any of you had issues.\n\nI'm going to go into the table I want, county natality, and click on the query button.  Notice that if my panes are too narrow, I might not see this button, and either need to click on the kebab menu, or broaden my pane.\n\nI'll choose to write my query in a split tab, just because I like to see multiple things in a single screen.  You can also choose a new tab, and select which tab you want to be in by clicking on it.\n\nMy query is almost entirely built, but I have to add some field names.  I'll add a couple here, making sure I get capitalization, spelling, and punctuation of the column names exactly right.\n\nThen my red exclamation points turn to green, and I can execute my query.  Again, if I don't see the \"Run\" button, I might need to broaden my pane or look in the kebab menu. \n\nMy query results show up below my query, and I can work with them a number of different ways.  But before we get into that, I us to experiment a bit more with helpful tools in BigQuery.\n:::\n\n\n# Using Gemini to Learn SQL\n\nLet's use the AI assistant to learn some SQL!\n\n![](media/gemini_query.png){.bordered}\n\n::: notes\n0:25 \n\nOne of the benefits of Gemini is that it can help compose your SQL code if you're new.  Let's say we want to understand the categorical data in one of our tables.\n\nThe table in the CDC births data which is called \"county natality by maternal morbidity\" has some maternal morbidity descriptions, and I'd like to understand how many of those there are.  Is it a yes/no field?  Something like a diagnosis from ICD or Snomed or some other ontology?  Or is this a field that anyone could fill in with their own words, so there's no standardization, so maybe there are ten thousand different descriptions with no standardizations?\n\nNow, I happen to know that I can use the SQL keyword DISTINCT to answer this question, but what if I didn't know?  Well, that's where we can use the Gemini AI assistant to help us.  See how there's a little Gemini star and pencil icon up in the corner of my boilerplate query?  Let's try this.  I'll screenshare now, and navigate away from my slides.\n\nOK, so I'm going to start from my project dashboard, just get a fresh tab here and close what I was working on before.\n\nNow that I'm in my dashboard, I'll choose BigQuery to open that up, make sure I'm looking at my starred data, to make the public datasets I care about appear.  And I want to expand the CDC data and select the maternal morbidities table.\n\nIn the schema, some of these fields make sense.  I can guess what's in them, like I expect average age of mother to be some sort of numeric field, probably a decimal, between, say, 15 and 45, but probably in the 20s or 30s.  But I am not quite sure how to make sense of Maternal_Morbidity_Desc.  It seems like this table doesn't contain individual level data, but county averages.  So what would go in a morbidity description?  Does this table have averages for each kind of morbidity, like gestational diabetes or hyperemesis?  I'm not sure. \n\nSo I'll go over to the Preview, and I can look around, but scrolling through, I'm still not sure what I might see throughout the entire table.  It seems like we have lots and lots of rows with the same value: None Checked.  But what if a morbidity was checked?  What would that look like?  How many are there?  I'd like to write a query so that the information I get back is quantitative and my method for getting that information is reproducible, and not just \"well I scrolled through and visually I think this is what the table contains.\"\n\nSo I'm going to click on the Query button with the magnifying glass and open a query in a new tab.  As a reminder, this gives me a template for a query in this table, so I don't have to write out the table name.  Since I don't know where to start, I'm going to click on the Gemini icon here and ask a question: \"What are the possible values for maternal morbidity description?\"  Note that I don't even give the formal name of the field, I kind of say it in English.  Let's see what Gemini will make of that.\n\nOK, wow, it does an okay job, this query seems to make sense. Now, I can \"insert\" it, but it's going to insert the whole query wherever my cursor is, which will be annoying.  So I'm going to copy it to my clipboard instead, and then paste it.\n\nDoes it work?  Uhhhh, it has a red alert... let's see what this is.  \n\nOK, this shows one of the flaws of Gemini.  While this would be valid in other SQL dialects, it actually won't work in BigQuery SQL.\n\nThe thinking here is that in the SELECT statement, Gemini suggested that I refer to the column or field I want information about by table name dot field name notation, which is totally fine.  BUT, as we talked about earlier, to refer to a specific table in BigQuery I need more than just the table name.  I have to add the entire table name, fully qualified, using the project name and dataset name too.\n\nSo I have two options.\n\nIn this case, there's no ambiguity about what table this field belongs to, because I'm only asking SQL to look at this one single table.  So I could just delete the table name and use the field name.  Let's see if that will make this turn from red to green.  Oh it does!  And let's run it.\n\nThree unique values.\n\nThe other option I have is to include the full table name, by copy/pasting it from this line below.  Now, this might seem redundant.  It's like saying \"bring me the frying pan from my kitchen at my street address, and look in my kitchen at my street address.\"  It's silly!  But sometimes, and you'll do this in a bit, you might be querying from two tables, and both tables might have a column or field that share a name.  So if I want to refer to the date column, and date appears in both the births and deaths table, which one do I mean?  The date column in births, or the date column in deaths?  \n\nSo let's try this version of the query.  It works, and we get the same info.\n\nNow I'd like to give you a couple of minutes to look at the links that appear at the bottom of an AI-generated query.  I'm going to put in a new question, and have you do the same thing. Either the same question as me or a different one. Once you see the query appear, and then at the bottom I can see three things that I want you to click on and investigate.  Edit Table Sources, Query Summary, and Use query with caution.  I'll give you 5 minutes to take a quick look at these.\n\n:::\n\n\n# JOINs in SQL\n\nI asked you before to find three things, and now we'll use them in a JOIN in SQL. \n\n-   One or more fields that has linking information in common, in that the data appears in both datasets \n-   One or more columns / fields in the ADI data that help characterize socioeconomic disadvantage and are in the same table as our join data\n-   One or more columns / fields in the CDC data that help describe something about birth statistics and are in the same table as our join data\n\n::: notes\n\nI asked you before to find three things: \n\n-   One or more fields that has linking information in common, in that the data appears in both datasets (might not have the same field name) -- we'll call this our \"join\" data\n-   One or more columns / fields in the ADI data that help characterize socioeconomic disadvantage and are in the same table as our join data\n-   One or more columns / fields in the CDC data that help describe something about birth statistics and are in the same table as our join data\n\nYou might be accustomed to joining or merging data from two dataframes in R, and you know how to do that, so why am I going to teach you how to JOIN in SQL?  \n\nWell, sometimes you're working with very large data in BigQuery, and you might want to make the data you bring into R smaller and more compact.  Instead of bringing over two huge, million row tables into R and doing a merge or join there, it can be more efficient to do that kind of first step in SQL.\n\nIn fact, I like to describe SQL as a heavy-duty tool.  If you imagine creating a sculpture out of wood or marble, you might envision -- and I'm not a sculptor, so forgive me if I'm wrong about this -- you might envision the first pass of your sculpture as getting rid of what you know you won't use with a very powerful and blunt instrument.  We're talking using a chainsaw or jackhammer.  Could you carve a spoon out of the heartwood of a tree trunk, using a fine set of chisels?  You could, but it's not quite the right tool for the job.  SQL is very powerful and fast and will do data joining much more efficiently than R.  BigQuery especially is well built to do this at scale.  So I'm going to use SQL to rough out my dataset, then bring it into R for finer detail work.  \n\n:::\n\n# Joins -- things to consider {.smaller}\n\n::: {.columns .v-center-container}\n::: {.column width=\"33%\"}\nWhat to join?\n\n* What two tables give us a fuller picture of our data, when used together?\n* What fields from each table will we include?\n\n:::\n::: {.column width=\"33%\"}\nWhat constitutes a join?\n\n* What needs to happen for rows to be a \"match\"?\n* Which linking field(s) are involved?\n:::\n::: {.column width=\"33%\"}\nWhich type of join / data completion\n\n* Which part of the Venn Diagram of table overlap do we care about?  Things that show up in only one table?  Or in both?\n:::\n:::\n\n::: notes\n\n:::\n\n# Join Types {.smaller}\n\nThere are 4 basic join types that can be used. We'll go into more detail about how each one works in the next few pages.\n\nHere, we simply provide a visual highlight to indicate the part of the data that's considered for inclusion with each type of join.\n\n\n::: {.columns .v-center-container}\n::: {.column width=\"25%\"}\n`INNER JOIN` (or just `JOIN`)\n![](media/inner_join.png)\n:::\n::: {.column width=\"25%\"}\n`LEFT` (or `LEFT OUTER`) JOIN\n![](media/left_outer_join.png)\n\n:::\n::: {.column width=\"25%\"}\n`RIGHT` (or `RIGHT OUTER`) JOIN\n![](media/right_outer_join.png)\n\n\n\n:::\n::: {.column width=\"25%\"}\n`FULL` (or `FULL OUTER`) JOIN\n![](media/full_outer_join.png)\n\n:::\n:::\n\n::: notes\n\n:::\n\nINNER JOIN\n\n\n# Our example: ADI and Birth Characteristics  {.smaller}\n\n* What data do we want?  Information about socioeconomic disadvantage (ADI tables) and how that relates to birth characteristics (CDC tables)\n* What will link the data from the two sources?  The county has to match (either the name or the FIPS code or both)\n* What kind of data completion do we want?  Only data where we have both ADI data and CDC data about the county.\n\n::: notes\nSo in this example, we have county-level data about ADI, which is a socioeconomic score, and county-level data about birth characteristics.  Let's say we want to join these datasets together.\n\nWhat linking data do we have?  We have information about the county.  I asked you to identify particular fields that might be able to link data from these two datasets.  What would you propose?  Let's consider the alternatives.\n\nAnd if we wanted to take a pertinent county-level measure of ADI, what would you choose?  What about CDC?\n:::\n\n# Syntax of a JOIN  {.smaller}\n\nThe basic syntax of a join is:\n\n```\nSELECT [fields we want]\nFROM [left table name] [some join type] [right table name]\nON (or USING) [join criteria]\n\n```\n\n::: notes\nOn your screen, you see the syntax of a JOIN.  Let's do one, using the fields we came up with.  Now, I wasn't sure what you all would choose, but I went ahead and did some slides with what I think might be useful. Let's see what I assembled!\n\n:::\n\n# A Sample JOIN  {.smaller}\n\n![](media/join_sample.png){.bordered}\n\n::: notes\nOK, let's start from the bottom and work our way up.  In lines 7 and 8 I have the two tables I want to join.  I've chosen to put the area_deprivation_index_by_county table from the ADI first, or on the left, and the county_natality table from the CDC second, or on the right. Now, what kind of join do I want? That determines what words appear between these two tables.  In my case, I'm not interested in data from the left side, the Births data side, unless the counties there also appear on the right side, the ADI side.  I'm interested in the full overlap.\n\nThose two tables have something in common, and that's what I've put in line 9: the county fips code, which goes by a different name in each table, must match.  \n\nNow, what kind of join do I want?  \n:::\n\n# Aggregation  {.smaller}\n\nAggregation gives you a single calculated value for multiple rows.  Examples include:\n\n* COUNT \n* MIN / MAX\n* SUM\n\n# Aggregation Examples  {.smaller}\n\nA Few Aggregate Functions: \n\n* ANY_VALUE (give me any one of the values)\n* AVG (mean of values)\n* CORR (Pearson's coefficient of correlation between 2 sets of values)\n* COUNT (number of rows)\n* COUNTIF (number of rows that match your description)\n* MAX (maximum from a set of values)\n* MIN (minimum from a set of values)\n* STDDEV (shortcut for STDDEV_POP, gives sample standard deviation for set of values)\n8 SUM (sum of values)\n\n# Let's do some aggregation\n\n\n\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-in-header": [
        "<link href=\"../site_libs/countdown-0.4.0/countdown.css\" rel=\"stylesheet\" />\n<script src=\"../site_libs/countdown-0.4.0/countdown.js\"></script>\n"
      ],
      "include-after-body": [
        "\n<script>\n  // htmlwidgets need to know to resize themselves when slides are shown/hidden.\n  // Fire the \"slideenter\" event (handled by htmlwidgets.js) when the current\n  // slide changes (different for each slide format).\n  (function () {\n    // dispatch for htmlwidgets\n    function fireSlideEnter() {\n      const event = window.document.createEvent(\"Event\");\n      event.initEvent(\"slideenter\", true, true);\n      window.document.dispatchEvent(event);\n    }\n\n    function fireSlideChanged(previousSlide, currentSlide) {\n      fireSlideEnter();\n\n      // dispatch for shiny\n      if (window.jQuery) {\n        if (previousSlide) {\n          window.jQuery(previousSlide).trigger(\"hidden\");\n        }\n        if (currentSlide) {\n          window.jQuery(currentSlide).trigger(\"shown\");\n        }\n      }\n    }\n\n    // hookup for slidy\n    if (window.w3c_slidy) {\n      window.w3c_slidy.add_observer(function (slide_num) {\n        // slide_num starts at position 1\n        fireSlideChanged(null, w3c_slidy.slides[slide_num - 1]);\n      });\n    }\n\n  })();\n</script>\n\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}